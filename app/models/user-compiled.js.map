{"version":3,"sources":["/Users/ashar61/work/projects/easy-node-authentication/app/models/user.js"],"names":[],"mappings":";;;AACA,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,IAAI,MAAM,GAAK,OAAO,CAAC,eAAe,CAAC,CAAC;;;AAGxC,IAAI,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;;AAE7B,SAAK,EAAc;AACf,aAAK,EAAU,MAAM;AACrB,gBAAQ,EAAO,MAAM;KACxB;AACD,YAAQ,EAAW;AACf,UAAE,EAAa,MAAM;AACrB,cAAM,EAAS,MAAM;AACrB,aAAK,EAAU,MAAM;AACrB,aAAK,EAAU,MAAM;AACrB,YAAI,EAAW,MAAM;KACxB;AACD,WAAO,EAAY;AACf,UAAE,EAAa,MAAM;AACrB,aAAK,EAAU,MAAM;AACrB,mBAAW,EAAI,MAAM;AACrB,gBAAQ,EAAO,MAAM;AACrB,cAAM,EAAS,MAAM;KACxB;AACD,UAAM,EAAa;AACf,UAAE,EAAa,MAAM;AACrB,aAAK,EAAU,MAAM;AACrB,aAAK,EAAU,MAAM;AACrB,YAAI,EAAW,MAAM;KACxB;;CAEJ,CAAC,CAAC;;;AAGH,UAAU,CAAC,OAAO,CAAC,YAAY,GAAG,UAAS,QAAQ,EAAE;AACjD,WAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;CACjE,CAAC;;;AAGF,UAAU,CAAC,OAAO,CAAC,aAAa,GAAG,UAAS,QAAQ,EAAE;AAClD,WAAO,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;CAC5D,CAAC;;;AAGF,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC","file":"user-compiled.js","sourcesContent":["// load the things we need\nvar mongoose = require('mongoose');\nvar bcrypt   = require('bcrypt-nodejs');\n\n// define the schema for our user model\nvar userSchema = mongoose.Schema({\n\n    local            : {\n        email        : String,\n        password     : String\n    },\n    facebook         : {\n        id           : String,\n        userid       : String,\n        token        : String,\n        email        : String,\n        name         : String\n    },\n    twitter          : {\n        id           : String,\n        token        : String,\n        displayName  : String,\n        username     : String,\n        secret       : String\n    },\n    google           : {\n        id           : String,\n        token        : String,\n        email        : String,\n        name         : String\n    }\n\n});\n\n// generating a hash\nuserSchema.methods.generateHash = function(password) {\n    return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);\n};\n\n// checking if password is valid\nuserSchema.methods.validPassword = function(password) {\n    return bcrypt.compareSync(password, this.local.password);\n};\n\n// create the model for users and expose it to our app\nmodule.exports = mongoose.model('User', userSchema);\n"]}