{"version":3,"sources":["/Users/ashar61/work/projects/easy-node-authentication/config/passport.js"],"names":[],"mappings":"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","file":"passport-compiled.js","sourcesContent":["// load all the things we need\nvar LocalStrategy    = require('passport-local').Strategy;\nvar FacebookStrategy = require('passport-facebook').Strategy;\nvar TwitterStrategy  = require('passport-twitter').Strategy;\nvar GoogleStrategy   = require('passport-google-oauth').OAuth2Strategy;\n\n// load up the user model\nvar User       = require('../app/models/user');\n\n// load the auth variables\nvar configAuth = require('./auth'); // use this one for testing\n\nmodule.exports = function(passport) {\n\n    passport.serializeUser(function(user, done) {\n        done(null, user.id);\n    });\n\n    // used to deserialize the user\n    passport.deserializeUser(function(id, done) {\n        User.findById(id, function(err, user) {\n            done(err, user);\n        });\n    });\n\n    passport.use('local-login', new LocalStrategy({\n        // by default, local strategy uses username and password, we will override with email\n        usernameField : 'email',\n        passwordField : 'password',\n        passReqToCallback : true // allows us to pass in the req from our route (lets us check if a user is logged in or not)\n    },\n    function(req, email, password, done) {\n        if (email)\n            email = email.toLowerCase(); // Use lower-case e-mails to avoid case-sensitive e-mail matching\n\n        // asynchronous\n        process.nextTick(function() {\n            User.findOne({ 'local.email' :  email }, function(err, user) {\n                // if there are any errors, return the error\n                if (err)\n                    return done(err);\n\n                // if no user is found, return the message\n                if (!user)\n                    return done(null, false, req.flash('loginMessage', 'No user found.'));\n\n                if (!user.validPassword(password))\n                    return done(null, false, req.flash('loginMessage', 'Oops! Wrong password.'));\n\n                // all is well, return user\n                else\n                    return done(null, user);\n            });\n        });\n\n    }));\n\n    passport.use('local-signup', new LocalStrategy({\n        // by default, local strategy uses username and password, we will override with email\n        usernameField : 'email',\n        passwordField : 'password',\n        passReqToCallback : true // allows us to pass in the req from our route (lets us check if a user is logged in or not)\n    },\n    function(req, email, password, done) {\n        if (email)\n            email = email.toLowerCase(); // Use lower-case e-mails to avoid case-sensitive e-mail matching\n\n        // asynchronous\n        process.nextTick(function() {\n            // if the user is not already logged in:\n            if (!req.user) {\n                User.findOne({ 'local.email' :  email }, function(err, user) {\n                    // if there are any errors, return the error\n                    if (err)\n                        return done(err);\n\n                    // check to see if theres already a user with that email\n                    if (user) {\n                        return done(null, false, req.flash('signupMessage', 'That email is already taken.'));\n                    } else {\n\n                        // create the user\n                        var newUser            = new User();\n\n                        newUser.local.email    = email;\n                        newUser.local.password = newUser.generateHash(password);\n\n                        newUser.save(function(err) {\n                            if (err)\n                                return done(err);\n\n                            return done(null, newUser);\n                        });\n                    }\n\n                });\n            // if the user is logged in but has no local account...\n            } else if ( !req.user.local.email ) {\n                // ...presumably they're trying to connect a local account\n                // BUT let's check if the email used to connect a local account is being used by another user\n                User.findOne({ 'local.email' :  email }, function(err, user) {\n                    if (err)\n                        return done(err);\n\n                    if (user) {\n                        return done(null, false, req.flash('loginMessage', 'That email is already taken.'));\n                        // Using 'loginMessage instead of signupMessage because it's used by /connect/local'\n                    } else {\n                        var user = req.user;\n                        user.local.email = email;\n                        user.local.password = user.generateHash(password);\n                        user.save(function (err) {\n                            if (err)\n                                return done(err);\n\n                            return done(null,user);\n                        });\n                    }\n                });\n            } else {\n                // user is logged in and already has a local account. Ignore signup. (You should log out before trying to create a new account, user!)\n                return done(null, req.user);\n            }\n\n        });\n\n    }));\n\n    passport.use(new FacebookStrategy({\n\n        clientID        : configAuth.facebookAuth.clientID,\n        clientSecret    : configAuth.facebookAuth.clientSecret,\n        callbackURL     : configAuth.facebookAuth.callbackURL,\n        passReqToCallback : true // allows us to pass in the req from our route (lets us check if a user is logged in or not)\n\n    },\n    function(req, token, refreshToken, profile, done) {\n\n        // asynchronous\n        process.nextTick(function() {\n\n               // check if the user is already logged in\n            if (!req.user) {\n\n\n                User.findOne({ 'facebook.id' : profile.id }, function(err, user) {\n                    if (err)\n                        return done(err);\n\n                    if (user) {\n\n                        // if there is a user id already but no token (user was linked at one point and then removed)\n                        if (!user.facebook.token) {\n                            user.facebook.token = token;\n                            user.facebook.name  = profile.name.givenName + ' ' + profile.name.familyName;\n                            user.facebook.email = (profile.emails[0].value || '').toLowerCase();\n\n                            user.save(function(err) {\n                                if (err)\n                                    return done(err);\n                                    \n                                return done(null, user);\n                            });\n                        }\n\n                        return done(null, user); // user found, return that user\n                    } else {\n                        // if there is no user, create them\n                        var newUser            = new User();\n\n                        newUser.facebook.id    = profile.id;\n                        newUser.facebook.token = token;\n                        newUser.facebook.name  = profile.name.givenName + ' ' + profile.name.familyName;\n                        newUser.facebook.email = (profile.emails[0].value || '').toLowerCase();\n\n                        newUser.save(function(err) {\n                            if (err)\n                                return done(err);\n                                \n                            return done(null, newUser);\n                        });\n                    }\n                });\n\n            } else {\n                // user already exists and is logged in, we have to link accounts\n                var user            = req.user; // pull the user out of the session\n\n                user.facebook.id    = profile.id;\n                user.facebook.token = token;\n                user.facebook.name  = profile.name.givenName + ' ' + profile.name.familyName;\n                user.facebook.email = (profile.emails[0].value || '').toLowerCase();\n\n                user.save(function(err) {\n                    if (err)\n                        return done(err);\n                        \n                    return done(null, user);\n                });\n\n            }\n        });\n\n    }));\n\n    passport.use(new TwitterStrategy({\n\n        consumerKey     : configAuth.twitterAuth.clientID,\n        consumerSecret  : configAuth.twitterAuth.clientSecret,\n        callbackURL     : configAuth.twitterAuth.callbackURL,\n        passReqToCallback : true\n\n    },\n    function(req, token, tokenSecret, profile, done) {\n\n        // asynchronous\n        process.nextTick(function() {\n            console.log(req)\n\n            // check if the user is already logged in\n            if (!req.user) {\n\n                User.findOne({ 'twitter.id' : profile.id }, function(err, user) {\n                    if (err)\n                        return done(err);\n\n                    if (user) {\n                        // if there is a user id already but no token (user was linked at one point and then removed)\n                        if (!user.twitter.token) {\n                            user.twitter.token       = token;\n                            user.twitter.username    = profile.username;\n                            user.twitter.displayName = profile.displayName;\n                            user.twitter.secret = tokenSecret\n\n                            user.save(function(err) {\n                                if (err)\n                                    return done(err);\n                                    \n                                return done(null, user);\n                            });\n                        }\n\n                        return done(null, user); // user found, return that user\n                    } else {\n                        // if there is no user, create them\n                        var newUser                 = new User();\n\n                        newUser.twitter.id          = profile.id;\n                        newUser.twitter.token       = token;\n                        newUser.twitter.username    = profile.username;\n                        newUser.twitter.displayName = profile.displayName;\n                        user.twitter.secret = tokenSecret\n\n                        newUser.save(function(err) {\n                            if (err)\n                                return done(err);\n                                \n                            return done(null, newUser);\n                        });\n                    }\n                });\n\n            } else {\n                // user already exists and is logged in, we have to link accounts\n                var user                 = req.user; // pull the user out of the session\n\n                user.twitter.id          = profile.id;\n                user.twitter.token       = token;\n                user.twitter.username    = profile.username;\n                user.twitter.displayName = profile.displayName;\n                user.twitter.secret = tokenSecret\n\n                user.save(function(err) {\n                    if (err)\n                        return done(err);\n                        \n                    return done(null, user);\n                });\n            }\n\n        });\n\n    }));\n\n    // =========================================================================\n    // GOOGLE ==================================================================\n    // =========================================================================\n    passport.use(new GoogleStrategy({\n\n        clientID        : configAuth.googleAuth.clientID,\n        clientSecret    : configAuth.googleAuth.clientSecret,\n        callbackURL     : configAuth.googleAuth.callbackURL,\n        passReqToCallback : true // allows us to pass in the req from our route (lets us check if a user is logged in or not)\n\n    },\n    function(req, token, refreshToken, profile, done) {\n\n        // asynchronous\n        process.nextTick(function() {\n\n            // check if the user is already logged in\n            if (!req.user) {\n\n                User.findOne({ 'google.id' : profile.id }, function(err, user) {\n                    if (err)\n                        return done(err);\n\n                    if (user) {\n\n                        // if there is a user id already but no token (user was linked at one point and then removed)\n                        if (!user.google.token) {\n                            user.google.token = token;\n                            user.google.name  = profile.displayName;\n                            user.google.email = (profile.emails[0].value || '').toLowerCase(); // pull the first email\n\n                            user.save(function(err) {\n                                if (err)\n                                    return done(err);\n                                    \n                                return done(null, user);\n                            });\n                        }\n\n                        return done(null, user);\n                    } else {\n                        var newUser          = new User();\n\n                        newUser.google.id    = profile.id;\n                        newUser.google.token = token;\n                        newUser.google.name  = profile.displayName;\n                        newUser.google.email = (profile.emails[0].value || '').toLowerCase() // pull the first email\n\n                        newUser.save(function(err) {\n                            if (err)\n                                return done(err);\n                                \n                            return done(null, newUser);\n                        });\n                    }\n                });\n\n            } else {\n                // user already exists and is logged in, we have to link accounts\n                var user               = req.user; // pull the user out of the session\n\n                user.google.id    = profile.id;\n                user.google.token = token;\n                user.google.name  = profile.displayName;\n                user.google.email = (profile.emails[0].value || '').toLowerCase(); // pull the first email\n\n                user.save(function(err) {\n                    if (err)\n                        return done(err);\n                        \n                    return done(null, user);\n                });\n\n            }\n\n        });\n\n    }));\n\n};\n"]}